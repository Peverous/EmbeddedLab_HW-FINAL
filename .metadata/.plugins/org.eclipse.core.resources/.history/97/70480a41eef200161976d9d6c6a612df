/*
 * University of Patras, Communications and Embedded Systems (COMES) Group
 *
 * Embedded Communication Systems
 * ========================================================================
 *
 * This is an example of how to initialize UART devices and Timers. It provides all the initialization
 * functions and some interrupt handlers to use as a reference. The hardware design (built for ARTY board)
 * includes three UARTS and three Timers. The first UART is connected to STDIO in order to print debug and
 * information messages to the user. The rest two UARTs are connected to PMOD pins and will be used to
 * transmit and receive data. Only one Timer is initialized in the code below, but it is up to the developer
 * to use the other two if needed.
 *
 * This example implements the following processes:
 * - Initialize Timer 0
 * - Initialize UART 1 and UART2
 * - Initialize Interrupt controller and connects the above devices to it
 * - Stays in the while(1) loop forever and waits for the Interrupt handlers to be called.
 *
 *----------------------------------------------------------------------------------------------------------------------
 *
 * The code is organized as follows:
 * - Interrupts.c / Interrupts.h:
 *  					They include the Interrupt controller's initialization function and all parameters
 *  					and variables related to it
 *
 * - UART.c / UART.h:
 * 						They include the UARTs' initialization function, the interrupt handlers and all
 * 						variables and parameters related to them
 *
 * * - Timer.c / Timer.h:
 * 						They include the Timer's initialization function, the interrupt handler and all
 * 						variables and parameters related to it
 *
 *----------------------------------------------------------------------------------------------------------------------
 *
 * UART Interrupt Handlers (UART.c):
 * - Receive Handler:  	It is executed when the UART's receive FIFO is not empty (when a character has been received)
 * 						Reads the character and sends it back to the same UART.
 * - Transmit Handler:	It is executed when the UART's transmit FIFO has been emptied (once all characters
 * 						have been transmitted)
 *
 * Timer 0 Interrupt Handler (Timer.c):
 * 	It blinks LED 0 periodically. The period is set by the timer's RESET_VALUE definition in "Timer.h"
 *
 *----------------------------------------------------------------------------------------------------------------------
 *
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "Interrupts.h"
#include "UART.h"
#include "Timer.h"
#include <stdlib.h>
#include "Defs.h"
#include "crc.h"



int main()
{
	int Status;
	unsigned char *rts_1 	 = (unsigned char*) UART1_RTS_ADDR;
	//unsigned char *cts_1 	 = (unsigned char*) UART1_CTS_ADDR;
	crc_init(); //Initialize crc Table

	//===================BUFFER INITIALIZATION==================================//
	for(i=0;i<BuffSize;i++)
	{
		TB[i]=0;
		RB[i]=0;
	}
	i=0;
	for (i=0;i<8;i++)
	{
		TB[i]=0xAA;
	}
	TB[8]=0x03;
	TB[9]=0x35;
	TB[10]=0x44;

    init_platform();


    i = 0;
    j = 0; crc_final=0;
    Rd_TB=0;
    Wr_TB=11;
    Rd_RB=0;
    Wr_RB=0;
    //num_of_incoming;
    num_of_writes=0;
    rec_ack=2;
    num_of_reads=0;
    flag_rc=2;
    flag_xon_xoff=1;
    flag_enable_TC=0;
    flag_enable_RC=0;
    // UART1: Clear to Send -> OFF (Negative Logic)
	*rts_1 = 0x01;
    // Initialize Timer 0 & 1
    Timer_Init(&TimerCounterInst_0, TIMER_CNTR_0, XPAR_TMRCTR_0_DEVICE_ID,&TimerCounterInst_1, TIMER_CNTR_1, XPAR_TMRCTR_1_DEVICE_ID);
   // Timer_Init(&TimerCounterInst_1, TIMER_CNTR_1, XPAR_TMRCTR_1_DEVICE_ID);
    // Initialize the UART devices
    UART_Init(&UART_Inst_Ptr_1, UART_1_DEV_ID,  &UART_Inst_Ptr_2, UART_2_DEV_ID);
    // Initialize Interrupt Controller, Enable interrupts in devices and connect them to the Interrupt Controller
    Status = SetupInterruptSystem(&UART_Inst_Ptr_1, UART_1_INT_IRQ_ID, &UART_Inst_Ptr_2, UART_2_INT_IRQ_ID, &TimerCounterInst_0, TMRCTR_INTERRUPT_ID_0, &TimerCounterInst_1, TMRCTR_INTERRUPT_ID_1);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
    // UART1: Clear to Send -> ON (Negative Logic)
	*rts_1 = 0x00;
	 xil_printf("Application Started\n\r");

	 /*Wait in the never-ending while loop until an interrupt has been occurred
		First: check the transmiter's Cyclic Buffer  if is almost full or almost empty and set rts OFF/ON respectively
		Second: check the receiver's Cyclic Buffer if is almost full of almost empty and set flag_rc 1/0 respectively
				The flag_rc indicates the timer to send to the channel XON/XOFF 
				flag_rc=0  -> send XOFF
				flag_rc=1  -> send XON
				flag_rc=2  -> keep sending data	 
				flag_rc=3  -> send ack
				flag_rc=4  -> send nack
	 */
    while(1) //check Pointers and stop sending data imidiatly or not, respectivly
    {
    	//xil_printf("while");
    	if (Rd_TB == (Wr_TB + 6) % BuffSize){ 	//if almost full cyclic TB 
    			*rts_1 = 0x01; 					//rts off
    			flag_rc=0;
    			//xil_printf("acksdfsd ");

    		}
    	else if(Wr_TB == (Rd_TB +6) % BuffSize){//if almost empty cyclic TB
    			*rts_1= 0x00; 					//rts on
    			//xil_printf("ackasdfa fadf a ");
    		}


		if(Wr_RB==(Rd_RB + 6) % BuffSize)  //if almost empty
		{
			flag_rc=1;				//make interconnection flag '1' between FSMs
		}
		else if(Rd_RB==(Wr_RB + 6) % BuffSize) //if almost full
		{
			flag_rc=0;
		}
		if(num_of_writes==64)					//an to matlab grapsei ta 64 byte data sto TB
		{										// na kleinei to rts kai na prxwraei ton Wr_tb
			*rts_1 = 0x01;
			//xil_printf("ack1111e ");// gia na mhn to pianei h parapanw synthiki me ta watermarks
			//Wr_TB=(Wr_TB+15)% BuffSize;			// kai stelnei XOFF embolemeno XWRIS LOGO
		}
	 	if(num_of_reads==79)
	 	{										//an o timer exei steilei sto kanali olo to frame
			flag_enable_TC=0;					// na ginetai bypass wste na mhn steilei skoupidia
			xil_printf("%d ",num_of_reads);
	 	}
		if (rec_ack==1)						//isws na mpei se trito timer
		{
			*rts_1 = 0x00;
			//xil_printf("ack ");
		}
		else if (rec_ack==0)
		{
			*rts_1 = 0x01;
		}


    };

    cleanup_platform();
    return 0;
}
