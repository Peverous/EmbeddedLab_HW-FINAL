/*
 * UART.c
 *
 *  Created on: 10 Íïå 2015
 *      Author: stelkork
 */
#include "UART.h"
#include "Interrupts.h"
#include "Defs.h"

int UART_Init(XUartLite *UART_Inst_Ptr_1, u16 Uart_1_Dev_ID,  XUartLite *UART_Inst_Ptr_2, u16 Uart_2_Dev_ID)
{
	int Status;

	/* Initialize the UART drivers so that they are ready to use. */
	Status = XUartLite_Initialize(UART_Inst_Ptr_1, Uart_1_Dev_ID);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	Status = XUartLite_Initialize(UART_Inst_Ptr_2, Uart_2_Dev_ID);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}


	/*
	 * Setup the handlers for the UartLite that will be called from the
	 * interrupt context when data has been sent and received, specify a
	 * pointer to the UartLite driver instance as the callback reference so
	 * that the handlers are able to access the instance data.
	 */
	XUartLite_SetSendHandler(UART_Inst_Ptr_1, SendHandler_UART_1, UART_Inst_Ptr_1);
	XUartLite_SetRecvHandler(UART_Inst_Ptr_1, RecvHandler_UART_1, UART_Inst_Ptr_1);

	XUartLite_SetSendHandler(UART_Inst_Ptr_2, SendHandler_UART_2, UART_Inst_Ptr_2);
	XUartLite_SetRecvHandler(UART_Inst_Ptr_2, RecvHandler_UART_2, UART_Inst_Ptr_2);

	/*
	 * Enable the interrupt of the UartLite so that interrupts will occur.
	 */
	XUartLite_EnableInterrupt(UART_Inst_Ptr_1);
	XUartLite_EnableInterrupt(UART_Inst_Ptr_2);

	return XST_SUCCESS;

}

/*****************************************************************************/
/**
*
* This function is the handler which performs processing to send data to the
* UartLite. It is called from an interrupt context such that the amount of
* processing performed should be minimized. It is called when the transmit
* FIFO of the UartLite is empty and more data can be sent through the UartLite.
*
* This handler provides an example of how to handle data for the UartLite,
* but is application specific.
*
* @param	CallBackRef contains a callback reference from the driver.
*		In this case it is the instance pointer for the UartLite driver.
* @param	EventData contains the number of bytes sent or received for sent
*		and receive events.
*
* @return	None.
*
* @note		None.
*
****************************************************************************/
void SendHandler_UART_1(void *CallBackRef, unsigned int EventData)
{

}

/****************************************************************************/
/**
*
* This function is the handler which performs processing to receive data from
* the UartLite. It is called from an interrupt context such that the amount of
* processing performed should be minimized.  It is called data is present in
* the receive FIFO of the UartLite such that the data can be retrieved from
* the UartLite. The size of the data present in the FIFO is not known when
* this function is called.
*
* This handler provides an example of how to handle data for the UartLite,
* but is application specific.
*
* @param	CallBackRef contains a callback reference from the driver, in
*		this case it is the instance pointer for the UartLite driver.
* @param	EventData contains the number of bytes sent or received for sent
*		and receive events.
*
* @return	None.
*
* @note		None.
*
****************************************************************************/
void RecvHandler_UART_1(void *CallBackRef, unsigned int EventData)
{
	unsigned int num_of_chars;
	u8 TU_data;

	num_of_chars = XUartLite_Recv(&UART_Inst_Ptr_1,RxBuffer_1,BUF_SIZE);
	flag_enable_TC=1;
	TU_data = *RxBuffer_1;
	TB[Wr_TB] = TU_data;

	//xil_printf("TB[%d] = %d\r\n",Wr_TB,TB[Wr_TB]);
	//xil_printf("Wr_TB = %d  Rd_TB = %D  Wr_RB = %d  Rd_RB = %d\r\n",Wr_TB, Rd_TB, Wr_RB,Rd_RB);
	//xil_printf("data from matlab %d \r\n",TU_data);
	Wr_TB = (Wr_TB + 1) % BuffSize;
}

/*****************************************************************************/
/**
*
* This function is the handler which performs processing to send data to the
* UartLite. It is called from an interrupt context such that the amount of
* processing performed should be minimized. It is called when the transmit
* FIFO of the UartLite is empty and more data can be sent through the UartLite.
*
* This handler provides an example of how to handle data for the UartLite,
* but is application specific.
*
* @param	CallBackRef contains a callback reference from the driver.
*		In this case it is the instance pointer for the UartLite driver.
* @param	EventData contains the number of bytes sent or received for sent
*		and receive events.
*
* @return	None.
*
* @note		None.
*
****************************************************************************/
void SendHandler_UART_2(void *CallBackRef, unsigned int EventData)
{

}

/****************************************************************************/
/**
*
* This function is the handler which performs processing to receive data from
* the UartLite. It is called from an interrupt context such that the amount of
* processing performed should be minimized.  It is called data is present in
* the receive FIFO of the UartLite such that the data can be retrieved from
* the UartLite. The size of the data present in the FIFO is not known when
* this function is called.
*
* This handler provides an example of how to handle data for the UartLite,
* but is application specific.
*
* @param	CallBackRef contains a callback reference from the driver, in
*		this case it is the instance pointer for the UartLite driver.
* @param	EventData contains the number of bytes sent or received for sent
*		and receive events.
*
* @return	None.
*
* @note		None.
*
****************************************************************************/
void RecvHandler_UART_2(void *CallBackRef, unsigned int EventData)
{
	static unsigned int num_of_chars;
	static int flag_xor=0;
	//static int count;
	u8 RC_data,tmp;

	num_of_chars = XUartLite_Recv(&UART_Inst_Ptr_2, RxBuffer_2, BUF_SIZE);
	RC_data = *RxBuffer_2;
	flag_enable_RC=1;

	if (flag_xor==0) 		//SXOLIA EDW MONO GIA TO ERGASTHRIIO 6..
	{
		if (RC_data==DEL)
			flag_xor=1;
		else
		{

			RB[Wr_RB] = RC_data;
			Wr_RB = (Wr_RB + 1) % BuffSize;
		}
	}
	else
	{
		tmp=RC_data^32;
		if (tmp== XOFF)
			flag_xon_xoff=0;
		else if(tmp==XON)
			flag_xon_xoff=1;
		else
		{
			RB[Wr_RB] = RC_data;
			Wr_RB = (Wr_RB + 1) % BuffSize;
		}
		flag_xor=0;
	}

	xil_printf("			WrPoint = %d\r\n",Wr_RB);
}


